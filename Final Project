import gurobipy as gp
from gurobipy import GRB

m = gp.Model("MIP_electProduct")

m.Params.LogToConsole = 0

#simple indicators: order or not order app and desserts
app = m.addVars(3, vtype=GRB.BINARY, name="app")
des = m.addVars(3, vtype=GRB.BINARY, name="des")

#order big portion of entree i or not
big = m.addVars(6, vtype=GRB.BINARY, name="big")

#amount eaten of small portion of entree i
d1 = m.addVars(6, vtype=GRB.INTEGER, name="d1")

#amount eaten of large portion of entree i
d2 = m.addVars(6, vtype=GRB.INTEGER, name="d2")

#satisfaction: 10 is max positive satisfaction

#set satisfaction of appetizers
bread = 4.67
cornbread = 7.33
salad = 5

#entree satisfactions: small is same as normal
mashed_potatoes_small = 9
#large is marginal: after eating a small portion, what is your additional satisfaction of a big portion
mashed_potatoes_large = 0
turkey_small = 6
turkey_large = -3
cranberry_small = 6
cranberry_large = 2
greenbeancass_small = 5.67
greenbeancass_large = 1.33
sweet_potato_small = 4.67
sweet_potato_large = 1
stuffing_small = 5
stuffing_large = 2
pumpkin_pie = 6
pecan_pie = 4.67
creme_brulee = 8.33

#set objective: entrees are divided by 5 to represent partial portions (out of a total portion size of 5) actually eaten
m.setObjective(bread * app[0] + cornbread * app[1] + salad * app[2] + 
               mashed_potatoes_small * (d1[0]/5) + mashed_potatoes_large * (d2[0]/5) + 
               turkey_small * (d1[1]/5) + turkey_large * (d2[1]/5) +
               cranberry_small * (d1[2]/5) + cranberry_large * (d2[2]/5) + 
               greenbeancass_small * (d1[3]/5) + greenbeancass_large * (d2[3]/5) +
               sweet_potato_small * (d1[4]/5) + sweet_potato_large * (d2[4]/5) +
               stuffing_small * (d1[5]/5) + stuffing_large * (d2[5]/5)+
               pumpkin_pie * des[0] + pecan_pie * des[1] + creme_brulee * des[2], GRB.MAXIMIZE)

#constraints

#size of portions: 0-10
m.addConstr(big[0]*5<=d1[0])
m.addConstr(big[1]*5<=d1[1])
m.addConstr(big[2]*5<=d1[2])
m.addConstr(big[3]*5<=d1[3])
m.addConstr(big[4]*5<=d1[4])
m.addConstr(big[5]*5<=d1[5])
m.addConstr(d1[0]<=5)
m.addConstr(d1[1]<=5)
m.addConstr(d1[2]<=5)
m.addConstr(d1[3]<=5)
m.addConstr(d1[4]<=5)
m.addConstr(d1[5]<=5)
m.addConstr(0<=d2[0])
m.addConstr(0<=d2[1])
m.addConstr(0<=d2[2])
m.addConstr(0<=d2[3])
m.addConstr(0<=d2[4])
m.addConstr(0<=d2[5])
m.addConstr(d2[0]<=big[0]*5)
m.addConstr(d2[1]<=big[1]*5)
m.addConstr(d2[2]<=big[2]*5)
m.addConstr(d2[3]<=big[3]*5)
m.addConstr(d2[4]<=big[4]*5)
m.addConstr(d2[5]<=big[5]*5)

#cost contraints
cost = (.84, .53, .98, 1.06, 1.06*1.75, 3.54,3.54*1.75, .18, .18*1.75, 3.33, 3.33*1.75,2.50, 2.5*1.75, .29,
        .29*1.75,.75,.75,2.46)

dec = (app[0], app[1], app[2], 1-big[0], big[0], 1-big[1], big[1], 1-big[2], big[2], 1-big[3], big[3], 
       1-big[4], big[4], 1-big[5], big[5], des[0], des[1], des[2])

m.addConstr(gp.quicksum(cost[i]*dec[i] for i in range(18)) <= 20)
            
#dietary constraints

#calories - three quarters of daily total
m.addConstr(154 * app[0] + 198 * app[1] + 45 * app[2] + 
               214 * (d1[0]+d2[0])/5 + 
               416 * (d1[1]+d2[1])/5 +
               86 * (d1[2]+d2[2])/5 +
               129 * (d1[3]+d2[3])/5 +
               123 * (d1[4]+d2[4])/5 +
               133 * (d1[5]+d2[5])/5 +
               318 * des[0] + 503 * des[1] + 320 * des[2] <= 2250 *.75) #possibly change with caloric input M or F

#fat constraint
m.addConstr(3.2 * app[0] + 6 * app[1] + 3.01 * app[2] + 
               7 * (d1[0]+d2[0])/5 + 
               13.3 * (d1[1]+d2[1])/5 +
               .1 * (d1[2]+d2[2])/5 + 
               5.2 * (d1[3]+d2[3])/5 +
               1 * (d1[4]+d2[4])/5 +
               4 * (d1[5]+d2[5])/5+
               15 * des[0] + 27 * des[1] + 26 * des[2] <= 87.5 *.75)

#protein constraint
m.addConstr(5.4 * app[0] + 4 * app[1] + 4.61 * app[2] + 
               4 * (d1[0]+d2[0])/5 + 
               69.8 * (d1[1]+d2[1])/5 +
               .1 * (d1[2]+d2[2])/5 + 
               3.7 * (d1[3]+d2[3])/5+
               5 * (d1[4]+d2[4])/5 +
               4 * (d1[5]+d2[5])/5 +
               6.7 * des[0] + 6 * des[1] + 4.4 * des[2] >= 51 *.75)

m.optimize()

print("obj_func = ", m.objVal)

for v in m.getVars():
    print('value of %s is %g' % (v.varName, v.x))
    
    
# SHADOW PRICES

 #PRICE CHANGE
m = gp.Model("MIP_electProduct")

m.Params.LogToConsole = 0

#simple indicators: order or not order app and desserts
app = m.addVars(3, vtype=GRB.BINARY, name="app")
des = m.addVars(3, vtype=GRB.BINARY, name="des")

#order big portion of entree i or not
big = m.addVars(6, vtype=GRB.BINARY, name="big")

#amount eaten of small portion of entree i
d1 = m.addVars(6, vtype=GRB.INTEGER, name="d1")

#amount eaten of large portion of entree i
d2 = m.addVars(6, vtype=GRB.INTEGER, name="d2")

#satisfaction: 10 is max positive satisfaction

#set satisfaction of appetizers
bread = 4.67
cornbread = 7.33
salad = 5

#entree satisfactions: small is same as normal
mashed_potatoes_small = 9
#large is marginal: after eating a small portion, what is your additional satisfaction of a big portion
mashed_potatoes_large = 0
turkey_small = 6
turkey_large = -3
cranberry_small = 6
cranberry_large = 2
greenbeancass_small = 5.67
greenbeancass_large = 1.33
sweet_potato_small = 4.67
sweet_potato_large = 1
stuffing_small = 5
stuffing_large = 2
pumpkin_pie = 6
pecan_pie = 4.67
creme_brulee = 8.33

#set objective: entrees are divided by 5 to represent partial portions (out of a total portion size of 5) actually eaten
m.setObjective(bread * app[0] + cornbread * app[1] + salad * app[2] +
               mashed_potatoes_small * (d1[0]/5) + mashed_potatoes_large * (d2[0]/5) +
               turkey_small * (d1[1]/5) + turkey_large * (d2[1]/5) +
               cranberry_small * (d1[2]/5) + cranberry_large * (d2[2]/5) +
               greenbeancass_small * (d1[3]/5) + greenbeancass_large * (d2[3]/5) +
               sweet_potato_small * (d1[4]/5) + sweet_potato_large * (d2[4]/5) +
               stuffing_small * (d1[5]/5) + stuffing_large * (d2[5]/5)+
               pumpkin_pie * des[0] + pecan_pie * des[1] + creme_brulee * des[2], GRB.MAXIMIZE)

#constraints

#size of portions: 0-10
m.addConstr(big[0]*5<=d1[0])
m.addConstr(big[1]*5<=d1[1])
m.addConstr(big[2]*5<=d1[2])
m.addConstr(big[3]*5<=d1[3])
m.addConstr(big[4]*5<=d1[4])
m.addConstr(big[5]*5<=d1[5])
m.addConstr(d1[0]<=5)
m.addConstr(d1[1]<=5)
m.addConstr(d1[2]<=5)
m.addConstr(d1[3]<=5)
m.addConstr(d1[4]<=5)
m.addConstr(d1[5]<=5)
m.addConstr(0<=d2[0])
m.addConstr(0<=d2[1])
m.addConstr(0<=d2[2])
m.addConstr(0<=d2[3])
m.addConstr(0<=d2[4])
m.addConstr(0<=d2[5])
m.addConstr(d2[0]<=big[0]*5)
m.addConstr(d2[1]<=big[1]*5)
m.addConstr(d2[2]<=big[2]*5)
m.addConstr(d2[3]<=big[3]*5)
m.addConstr(d2[4]<=big[4]*5)
m.addConstr(d2[5]<=big[5]*5)

#cost contraints
cost = (.84, .53, .98, 1.06, 1.06*1.75, 3.54,3.54*1.75, .18, .18*1.75, 3.33, 3.33*1.75,2.50, 2.5*1.75, .29,
        .29*1.75,.75,.75,2.46)

dec = (app[0], app[1], app[2], 1-big[0], big[0], 1-big[1], big[1], 1-big[2], big[2], 1-big[3], big[3],
       1-big[4], big[4], 1-big[5], big[5], des[0], des[1], des[2])

m.addConstr(gp.quicksum(cost[i]*dec[i] for i in range(18)) <= 12)
           
#dietary constraints

#calories - three quarters of daily total
m.addConstr(154 * app[0] + 198 * app[1] + 45 * app[2] +
               214 * (d1[0]+d2[0])/5 +
               416 * (d1[1]+d2[1])/5 +
               86 * (d1[2]+d2[2])/5 +
               129 * (d1[3]+d2[3])/5 +
               123 * (d1[4]+d2[4])/5 +
               133 * (d1[5]+d2[5])/5 +
               318 * des[0] + 503 * des[1] + 320 * des[2] <= 2250 *.75) #possibly change with caloric input M or F

#fat constraint
m.addConstr(3.2 * app[0] + 6 * app[1] + 3.01 * app[2] +
               7 * (d1[0]+d2[0])/5 +
               13.3 * (d1[1]+d2[1])/5 +
               .1 * (d1[2]+d2[2])/5 +
               5.2 * (d1[3]+d2[3])/5 +
               1 * (d1[4]+d2[4])/5 +
               4 * (d1[5]+d2[5])/5+
               15 * des[0] + 27 * des[1] + 26 * des[2] <= 87.5 *.75)

#protein constraint
m.addConstr(5.4 * app[0] + 4 * app[1] + 4.61 * app[2] +
               4 * (d1[0]+d2[0])/5 +
               69.8 * (d1[1]+d2[1])/5 +
               .1 * (d1[2]+d2[2])/5 +
               3.7 * (d1[3]+d2[3])/5+
               5 * (d1[4]+d2[4])/5 +
               4 * (d1[5]+d2[5])/5 +
               6.7 * des[0] + 6 * des[1] + 4.4 * des[2] >= 51 *.75)

m.optimize()

print("obj_func = ", m.objVal)

for v in m.getVars():
    print('value of %s is %g' % (v.varName, v.x))
  # NUTRITION CHANGE

m = gp.Model("MIP_electProduct")

m.Params.LogToConsole = 0

#simple indicators: order or not order app and desserts
app = m.addVars(3, vtype=GRB.BINARY, name="app")
des = m.addVars(3, vtype=GRB.BINARY, name="des")

#order big portion of entree i or not
big = m.addVars(6, vtype=GRB.BINARY, name="big")

#amount eaten of small portion of entree i
d1 = m.addVars(6, vtype=GRB.INTEGER, name="d1")

#amount eaten of large portion of entree i
d2 = m.addVars(6, vtype=GRB.INTEGER, name="d2")

#satisfaction: 10 is max positive satisfaction

#set satisfaction of appetizers
bread = 4.67
cornbread = 7.33
salad = 5

#entree satisfactions: small is same as normal
mashed_potatoes_small = 9
#large is marginal: after eating a small portion, what is your additional satisfaction of a big portion
mashed_potatoes_large = 0
turkey_small = 6
turkey_large = -3
cranberry_small = 6
cranberry_large = 2
greenbeancass_small = 5.67
greenbeancass_large = 1.33
sweet_potato_small = 4.67
sweet_potato_large = 1
stuffing_small = 5
stuffing_large = 2
pumpkin_pie = 6
pecan_pie = 4.67
creme_brulee = 8.33

#set objective: entrees are divided by 5 to represent partial portions (out of a total portion size of 5) actually eaten
m.setObjective(bread * app[0] + cornbread * app[1] + salad * app[2] +
               mashed_potatoes_small * (d1[0]/5) + mashed_potatoes_large * (d2[0]/5) +
               turkey_small * (d1[1]/5) + turkey_large * (d2[1]/5) +
               cranberry_small * (d1[2]/5) + cranberry_large * (d2[2]/5) +
               greenbeancass_small * (d1[3]/5) + greenbeancass_large * (d2[3]/5) +
               sweet_potato_small * (d1[4]/5) + sweet_potato_large * (d2[4]/5) +
               stuffing_small * (d1[5]/5) + stuffing_large * (d2[5]/5)+
               pumpkin_pie * des[0] + pecan_pie * des[1] + creme_brulee * des[2], GRB.MAXIMIZE)

#constraints

#size of portions: 0-10
m.addConstr(big[0]*5<=d1[0])
m.addConstr(big[1]*5<=d1[1])
m.addConstr(big[2]*5<=d1[2])
m.addConstr(big[3]*5<=d1[3])
m.addConstr(big[4]*5<=d1[4])
m.addConstr(big[5]*5<=d1[5])
m.addConstr(d1[0]<=5)
m.addConstr(d1[1]<=5)
m.addConstr(d1[2]<=5)
m.addConstr(d1[3]<=5)
m.addConstr(d1[4]<=5)
m.addConstr(d1[5]<=5)
m.addConstr(0<=d2[0])
m.addConstr(0<=d2[1])
m.addConstr(0<=d2[2])
m.addConstr(0<=d2[3])
m.addConstr(0<=d2[4])
m.addConstr(0<=d2[5])
m.addConstr(d2[0]<=big[0]*5)
m.addConstr(d2[1]<=big[1]*5)
m.addConstr(d2[2]<=big[2]*5)
m.addConstr(d2[3]<=big[3]*5)
m.addConstr(d2[4]<=big[4]*5)
m.addConstr(d2[5]<=big[5]*5)

#cost contraints
cost = (.84, .53, .98, 1.06, 1.06*1.75, 3.54,3.54*1.75, .18, .18*1.75, 3.33, 3.33*1.75,2.50, 2.5*1.75, .29,
        .29*1.75,.75,.75,2.46)

dec = (app[0], app[1], app[2], 1-big[0], big[0], 1-big[1], big[1], 1-big[2], big[2], 1-big[3], big[3],
       1-big[4], big[4], 1-big[5], big[5], des[0], des[1], des[2])

m.addConstr(gp.quicksum(cost[i]*dec[i] for i in range(18)) <= 20)
           
#dietary constraints

#calories - three quarters of daily total
m.addConstr(154 * app[0] + 198 * app[1] + 45 * app[2] +
               214 * (d1[0]+d2[0])/5 +
               416 * (d1[1]+d2[1])/5 +
               86 * (d1[2]+d2[2])/5 +
               129 * (d1[3]+d2[3])/5 +
               123 * (d1[4]+d2[4])/5 +
               133 * (d1[5]+d2[5])/5 +
               318 * des[0] + 503 * des[1] + 320 * des[2] <= 2250) #possibly change with caloric input M or F

#fat constraint
m.addConstr(3.2 * app[0] + 6 * app[1] + 3.01 * app[2] +
               7 * (d1[0]+d2[0])/5 +
               13.3 * (d1[1]+d2[1])/5 +
               .1 * (d1[2]+d2[2])/5 +
               5.2 * (d1[3]+d2[3])/5 +
               1 * (d1[4]+d2[4])/5 +
               4 * (d1[5]+d2[5])/5+
               15 * des[0] + 27 * des[1] + 26 * des[2] <= 87.5)

#protein constraint
m.addConstr(5.4 * app[0] + 4 * app[1] + 4.61 * app[2] +
               4 * (d1[0]+d2[0])/5 +
               69.8 * (d1[1]+d2[1])/5 +
               .1 * (d1[2]+d2[2])/5 +
               3.7 * (d1[3]+d2[3])/5+
               5 * (d1[4]+d2[4])/5 +
               4 * (d1[5]+d2[5])/5 +
               6.7 * des[0] + 6 * des[1] + 4.4 * des[2] >= 51)

m.optimize()

print("obj_func = ", m.objVal)

for v in m.getVars():
    print('value of %s is %g' % (v.varName, v.x))

# COST REDUCTION ANALYSIS

import random
random.seed(3230)
final = []
final_sat = []

for i in range(100000):
    app_d = []
    main = []
    d1 = []
    d2 = []
    big = []
    calories_apps = (154, 198, 45, 318, 503, 320)
    calories_mains = (214, 416, 86, 129, 123, 133)
    fat_apps = (3.2, 6, 3.01, 15, 27, 26)
    fat_mains = (7, 13.3, .1, 5.2, 1, 4)
    proteins_apps = (5.4, 4, 4,61, 6.7, 6, 4.4)
    proteins_mains = (4, 69.8, .1, 3.7, 5, 4)
    prices_apps = (.84, .53, .98, .75, .75, 2.46)
    prices_mains = (1.06, 1.06*1.75, 3.54,3.54*1.75, .18, .18*1.75, 3.33, 3.33*1.75,2.50, 2.5*1.75, .29, .29*1.75)
   
    sat_apps_d = (4.67, 7.33, 5, 6, 4.67, 8.33)
    sat_small_main = (9, 6, 6, 5.67, 4.67, 5)
    sat_large_main = (0, -3, 2, 1.33, 1, 2)
    for a in range(6):
        app_d.append(round(random.random()))
        main.append(round(10*random.random()))
    for b in range(6):
        if (main[b]>5):
            d2.append(main[b] - 5)
            d1.append(5)
            big.append(1)
        else:
            d1.append(main[b])
            d2.append(0)
            big.append(0)
    cost_apps = 0
    cost_main = 0
    calories_app = 0
    calories_main = 0
    fat_app = 0
    fat_main = 0
    proteins_app = 0
    proteins_main = 0
    for c in range(6):
       
        #calories
        calories_app += calories_apps[c]*app_d[c]
        calories_main += calories_mains[c]*(d1[c]+d2[c])/5
       
        #fats
        fat_app += fat_apps[c]*app_d[c]
        fat_main += fat_mains[c]*(d1[c]+d2[c])/5
       
        #proteins
        proteins_app += proteins_apps[c]*app_d[c]
        proteins_main += proteins_mains[c]*(d1[c]+d2[c])/5
       
        #prices
        cost_apps += prices_apps[c]*app_d[c]
        if (big[c] == 1):
            cost_main += prices_mains[2*c+1]
        else:
            cost_main += prices_mains[2*c]
           
           
    total_cost = cost_apps + cost_main
    cost_con = (total_cost <= 20)
   
    total_calories = calories_app + calories_main
    calories_con = (total_calories <= (2250*0.75))
   
    total_fat = fat_app + fat_main
    fat_con = (total_fat <= (87.5*0.75))
   
    total_protein = proteins_app + proteins_main
    protein_con = (total_protein >= (51*0.75))
   
    if (cost_con & calories_con & fat_con & protein_con):
        total_sat_app_d = 0
        total_sat_small = 0
        total_sat_big = 0
        for d in range(6):
            total_sat_app_d += app_d[d]*sat_apps_d[d]
            total_sat_small += d1[d]/5*sat_small_main[d]
            total_sat_big += d2[d]/5*sat_large_main[d]
        total_sat = total_sat_app_d+total_sat_big+total_sat_small
        final.append(app_d)
        final.append(d1)
        final.append(d2)
        final.append(total_sat)
        final_sat.append(total_sat)
   
max_sat = max(final_sat)
print(max_sat)
print(final[0:12])
